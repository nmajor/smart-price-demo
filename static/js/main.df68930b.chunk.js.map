{"version":3,"sources":["components/Navbar.js","components/FileUpload.js","components/DataVisualizer/SheetJson.js","components/DataVisualizer/DataVisualizer.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","className","FileUpload","setWorkbook","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","workbook","XLSX","read","type","cellNF","cellStyles","bookVBA","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","SheetJson","sheetName","sheet","jsonObj","utils","sheet_to_json","raw","header","key","src","SheetOption","currentOption","sheetOption","setSheetOption","activeClass","onClick","Main","sheets","Object","keys","map","DataVisualizer","Sheets","useState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df68930b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Navbar() {\n  return (<nav className=\"h-24 flex items-center justify-center flex-wrap bg-gray-800 p-6 fixed w-full z-10 top-0\">\n\t\t<div className=\"flex items-center flex-shrink-0 text-white mr-6\">\n\t\t\t<span className=\"text-2xl pl-2\"><i className=\"em em-grinning\"></i> Price Forcasting</span>\n\t\t</div>\n\t</nav>);\n}","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport XLSX from 'xlsx';\n\nexport default function FileUpload({ setWorkbook }) {\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader()\n\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = () => {\n      console.log(`\n        f: formula\n        h: html\n        z: number format string\n        w: formatted text\n        vbaraw: VBA blob\n      `);\n\n      // Do whatever you want with the file contents\n      const binaryStr = reader.result\n      \n      const options = {\n        type:'array',\n        cellNF: true,\n        cellStyles: true,\n        bookVBA: true,\n      };\n      const workbook = XLSX.read(binaryStr, options);\n      console.log();\n      \n      setWorkbook(workbook);\n    }\n    reader.readAsArrayBuffer(acceptedFiles[0])\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div className=\"mt-6\">\n      <div {...getRootProps()} className=\"relative p-4 border-dashed border-2 border-gray-300\">\n        <input {...getInputProps()} />\n        {\n          isDragActive ?\n            <p>Drop the files here ...</p> :\n            <p>Drag 'n' drop some files here, or click to select files</p>\n        }\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport ReactJson from 'react-json-view'\nimport XLSX from 'xlsx';\n\nexport default function SheetJson({ sheetName, sheet }) {\n  console.log(`Sheet ${sheetName}`, sheet);\n  const jsonObj = XLSX.utils.sheet_to_json(sheet, { raw: true, header: 'A' })\n  return (<div key={sheetName} className=\"background-white w-full m-6 rounded p-4 border-solid border-2 border-gray-300\">\n    <h3>{sheetName}</h3>\n    <ReactJson src={jsonObj} />\n  </div>);\n}","import React, { useState } from 'react';\nimport ReactJson from 'react-json-view'\nimport XLSX from 'xlsx';\nimport SheetJson from './SheetJson';\n\nfunction SheetOption({ currentOption, sheetOption, setSheetOption }) {\n  const activeClass = currentOption === sheetOption && 'bg-gray-600 text-white';\n  return (<div onClick={() => setSheetOption(sheetOption)} className={`cursor-pointer p-1 m-1 border-solid rounded border-2 border-gray-300 ${activeClass}`}>\n    {sheetOption}\n  </div>);\n}\n\nfunction Main({ sheets, sheetOption }) {\n  if (sheetOption === 'All') {\n    return (<div>\n      {sheets && Object.keys(sheets).map((sheetName) => {\n        const sheet = sheets[sheetName];\n        return <SheetJson sheet={sheet} sheetName={sheetName} />\n      })}\n    </div>);\n  }\n\n  if (sheetOption) {\n    return <SheetJson sheet={sheets[sheetOption]} sheetName={sheetOption} />\n  }\n\n  return <div />\n}\n\nexport default function DataVisualizer({ workbook }) {\n  if (workbook) console.log('Workbook', workbook);\n  const sheets = (workbook || {}).Sheets;\n\n  const [sheetOption, setSheetOption] = useState();\n\n  if (!workbook) return <div />;\n\n  return (<div>\n    <div className=\"flex flex-wrap justify-center p-4\">\n      {['All', ...Object.keys(sheets)].map((sheetName) => (<SheetOption currentOption={sheetOption} sheetOption={sheetName} setSheetOption={setSheetOption} />))}\n    </div>\n    <Main sheets={sheets} sheetOption={sheetOption} />\n  </div>);\n}","import React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport FileUpload from './FileUpload';\nimport DataVisualizer from './DataVisualizer/DataVisualizer';\n\nexport default function App() {\n  const [workbook, setWorkbook] = useState();\n\n  return (\n    <div className=\"bg-gray-100 pt-24 w-full h-full\">\n      <Navbar />\n      <main className=\"flex flex-col w-full h-full items-center\">\n        <FileUpload setWorkbook={setWorkbook} />\n        <DataVisualizer workbook={workbook} />\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css'\nimport './assets/index.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}