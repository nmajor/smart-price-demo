{"version":3,"sources":["components/Navbar.js","components/FileUpload.js","components/DataVisualizer.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","FileUpload","setWorkbook","onDrop","useCallback","acceptedFiles","console","log","reader","FileReader","onabort","onerror","onload","binaryStr","result","workbook","XLSX","read","type","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","DataVisualizer","sheets","Sheets","Object","keys","map","sheetName","sheet","jsonObj","utils","sheet_to_json","header","src","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAEe,SAASA,IACtB,OAAQ,yBAAKC,UAAU,2FACvB,yBAAKA,UAAU,mDACd,uBAAGA,UAAU,8DAA8DC,KAAK,KAC/E,0BAAMD,UAAU,iBAAgB,uBAAGA,UAAU,mBAA7C,wB,4BCFW,SAASE,EAAT,GAAsC,IAAhBC,EAAe,EAAfA,YAC7BC,EAASC,uBAAY,SAAAC,GACzBC,QAAQC,IAAI,wBAAyBF,GACrC,IAAMG,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMJ,QAAQC,IAAI,6BACnCC,EAAOG,QAAU,kBAAML,QAAQC,IAAI,4BACnCC,EAAOI,OAAS,WAEd,IAAMC,EAAYL,EAAOM,OACzBR,QAAQC,IAAI,iBAAkBC,GAE9B,IAAMO,EAAWC,IAAKC,KAAKJ,EAAW,CAACK,KAAK,UAC5CZ,QAAQC,MAERL,EAAYa,IAEdP,EAAOW,kBAAkBd,EAAc,MACtC,IAlB+C,EAmBEe,YAAY,CAACjB,WAA1DkB,EAnB2C,EAmB3CA,aAAcC,EAnB6B,EAmB7BA,cAAeC,EAnBc,EAmBdA,aAEpC,OACE,yBAAKxB,UAAU,QACb,yCAASsB,IAAT,CAAyBtB,UAAU,wDACjC,0BAAWuB,KAETC,EACE,sDACA,wF,qBC5BG,SAASC,EAAT,GAAuC,IAAbT,EAAY,EAAZA,SACvCT,QAAQC,IAAI,mBAAoBQ,GAChC,IAAMU,GAAUV,GAAY,IAAIW,OAEhC,OAAQ,6BACLD,GAAUE,OAAOC,KAAKH,GAAQI,KAAI,SAACC,GAClC,IAAMC,EAAQN,EAAOK,GACrBxB,QAAQC,IAAI,gBAAiBwB,GAC7B,IAAMC,EAAUhB,IAAKiB,MAAMC,cAAcH,EAAO,CAAEI,OAAO,IACzD,OAAQ,yBAAKpC,UAAU,iFACrB,4BAAK+B,GACL,kBAAC,IAAD,CAAWM,IAAKJ,SCVT,SAASK,IAAO,IAAD,EACIC,mBAAS,IADb,mBACrBvB,EADqB,KACXb,EADW,KAG5B,OACE,yBAAKH,UAAU,mCACb,kBAACD,EAAD,MACA,0BAAMC,UAAU,4CACd,kBAACE,EAAD,CAAYC,YAAaA,IACzB,kBAACsB,EAAD,CAAgBT,SAAUA,MCDdwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFU,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.5f10547c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Navbar() {\n  return (<nav className=\"h-24 flex items-center justify-center flex-wrap bg-gray-800 p-6 fixed w-full z-10 top-0\">\n\t\t<div className=\"flex items-center flex-shrink-0 text-white mr-6\">\n\t\t\t<a className=\"text-white no-underline hover:text-white hover:no-underline\" href=\"#\">\n\t\t\t\t<span className=\"text-2xl pl-2\"><i className=\"em em-grinning\"></i> Price Forcasting</span>\n\t\t\t</a>\n\t\t</div>\n\t</nav>);\n}","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport XLSX from 'xlsx';\n\nexport default function FileUpload({ setWorkbook }) {\n  const onDrop = useCallback(acceptedFiles => {\n    console.log('blah hi acceptedFiles', acceptedFiles);\n    const reader = new FileReader()\n\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      const binaryStr = reader.result\n      console.log('blah hi reader', reader);\n      \n      const workbook = XLSX.read(binaryStr, {type:'array'});\n      console.log();\n      \n      setWorkbook(workbook);\n    }\n    reader.readAsArrayBuffer(acceptedFiles[0])\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div className=\"mt-6\">\n      <div {...getRootProps()} className=\"relative p-4 border-dashed border-2 border-gray-300\">\n        <input {...getInputProps()} />\n        {\n          isDragActive ?\n            <p>Drop the files here ...</p> :\n            <p>Drag 'n' drop some files here, or click to select files</p>\n        }\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport ReactJson from 'react-json-view'\nimport XLSX from 'xlsx';\n\nexport default function DataVisualizer({ workbook }) {\n  console.log('blah hi workbook', workbook);\n  const sheets = (workbook || {}).Sheets;\n\n  return (<div>\n    {sheets && Object.keys(sheets).map((sheetName) => {\n      const sheet = sheets[sheetName];\n      console.log('blah hi sheet', sheet);\n      const jsonObj = XLSX.utils.sheet_to_json(sheet, { header:1 })\n      return (<div className=\"background-white w-full m-6 rounded p-4 border-solid border-2 border-gray-300\">\n        <h3>{sheetName}</h3>\n        <ReactJson src={jsonObj} />\n      </div>);\n    })}\n  </div>);\n}","import React, { Fragment, useState } from 'react';\nimport Navbar from './Navbar';\nimport FileUpload from './FileUpload';\nimport DataVisualizer from './DataVisualizer';\n\nexport default function App() {\n  const [workbook, setWorkbook] = useState([]);\n\n  return (\n    <div className=\"bg-gray-100 pt-24 w-full h-full\">\n      <Navbar />\n      <main className=\"flex flex-col w-full h-full items-center\">\n        <FileUpload setWorkbook={setWorkbook} />\n        <DataVisualizer workbook={workbook} />\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css'\nimport './assets/index.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}